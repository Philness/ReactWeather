PASSING DATA WORKFLOW USING A FORM

PART 1. In the child component that contains the form, do the following:

    A. Add an onFormSubmit function.
        1. Make sure you place an event argument in the function
        2. You should use e.preventDefault() to prevent the entire page from reloading, unless you want it to reload for some reason.
        3. Pull data from your form using this.refs.REF NAME.value
        4. Put in an if function to tell the function not to fire if the field is blank, that is, if the value.length isn't zero.
            a. Clear any filled form fields by setting the value to "".
            b. Pass the data you just got to the parent, using this.props.((on))FUNCTION NAME(data)

    B. Add an onSubmit property to the form, telling it which function to run.
        1. Put the function in braces, it's not a string like html usually has, since it's really jsx.
        2. Use the this. keyword before the function name

    C. Add a "ref" name to the inputs that you intend to pass over to the Parent.



PART 2. In the parent function that contains the state, do the following:

    A. Add a handling function to operate on the data from the form.v -
        1. The name of the handling function must be ((handle))FUNCTION NAME FROM 4b: function(data){}
        2. The handling function should now run this.setState{key: value}, drawing the values from the data.

    B. In the JSX, tell the child that retrieves the data what to do with it.
        1. Find the child with the form, give it an ((on))FUNCTION NAME property.
        2. Tell that function to point to {this.((handle))FUNCTION NAME}.
        3. Use "this" because the function isn't defined in the JSX context, but is defined in the Class constructor context.

    C. Set an initial state for the parent with getInitialState function().
        1. Return an object with key value pairs that match up with the handling function in 2B.
        2. This is optional, if you're okay with having them as undefined before the form submit.
    
    D. Inside the render function:
        1. Before the return:
            a. Define new variables set equal to the state using var {var list} = this.state 
            b. This is called destructuring syntax, and it will create several new vars.
        2. Inside the return:
            a. put new properties in the child that's going to display them.
            b. set each property equal to the vars you made before the return.



PART 3. In the child function that's going to display the new state, do the following:
    A. Pull the variables off of the property object before the render function.
        1. You can use {vars} = this.props again to generate new variables in the child.
        2. Make sure that the variable names you're going to use are consistent throughout all classes.
    B. Place the variables where you want them in the render function with {} around them.

    
